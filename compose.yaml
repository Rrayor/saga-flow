services:
  postgres:
    image: 'postgres:latest'
    environment:
      - 'POSTGRES_DB=sagaflow'
      - 'POSTGRES_PASSWORD=secret'
      - 'POSTGRES_USER=admin'
    ports:
      - '5432:5432'

#  # The hello-observability application
#  saga-flow:
#    image: saga-flow
#    volumes:
#      # Log files. They are all also accessible to the agent container,
#      # through docker volume mount
#      - ./logs/saga-flow.log:/tmp/saga-flow.log
#      - ./logs/access_log.log:/tmp/access_log.log
#    environment:
#      # Tracing configuration
#      JAVA_TOOL_OPTIONS: -javaagent:./opentelemetry-javaagent.jar
#      OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: http://tempo:4317
#      OTEL_SERVICE_NAME: saga-flow
#      OTEL_TRACES_EXPORTER: otlp
#    ports:
#      - "8080:8080"
#    depends_on:
#      - postgres

  tempo:
    image: grafana/tempo
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./config/tempo-local.yaml:/etc/tempo.yaml
      - ./tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http
      - "9411"   # zipkin

  loki:
    image: grafana/loki
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://tempo:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1

  prometheus:
    image: prom/prometheus
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    command: [
        "--config.file=/etc/prometheus.yaml",
          "--enable-feature=exemplar-storage",
          "--storage.tsdb.path=/prometheus",
          "--web.console.libraries=/usr/share/prometheus/console_libraries",
          "--web.console.templates=/usr/share/prometheus/consoles",
          "--web.enable-remote-write-receiver"
    ]
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus.yaml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana
    extra_hosts: [ 'host.docker.internal:host-gateway' ]
    volumes:
      # grafana.ini
      # see: https://grafana.com/docs/grafana/latest/setup-grafana/configure-docker/#default-paths
      - ./config/grafana.ini:/etc/grafana/grafana.ini
      # Pre-load the data sources
      - ./config/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      # Pre-load the Hello Observability dashboard
      - ./dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_USERS_DEFAULT_THEME=light
      - GF_FEATURE_TOGGLES_ENABLE=tempoSearch,tempoServiceGraph,tempoApmTable
    ports:
      - "3000:3000"

  agent:
    image: grafana/agent:latest
    volumes:
      # Agent configuration
      - ./config/agent.yaml:/etc/agent-config/agent.yaml:ro
      # Log files
      - ./logs/saga-flow.log:/tmp/saga-flow.log:rw
      - ./logs/access_log.log:/tmp/access_log.log:rw
      - ./logs/prometheus-positions.yaml:/tmp/positions.yaml:rw
    entrypoint:
      - /bin/grafana-agent
      - -config.file=/etc/agent-config/agent.yaml
      - -metrics.wal-directory=/tmp/agent/wal
      - -enable-features=integrations-next
      - -config.expand-env
      - -config.enable-read-api
    environment:
      HOSTNAME: grafana-agent
      #      REMOTE_WRITE_HOST: cortex:9009
      LOKI_HOST: host.docker.internal:3100
      TEMPO_HOST: tempo:3200
    ports:
      - "12345:12345"
    depends_on:
      - loki
      - tempo
  # Prometheus: http://localhost:9090/
  # Grafana: http://localhost:3000/
